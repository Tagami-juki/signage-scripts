<!doctype html><html lang="ja">
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>天気マップ（サイネージ）</title>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
<style>
  html,body,#map{height:100%;margin:0;background:#0b1220;color:#e6edf3;font-family:system-ui,"Noto Sans JP",sans-serif}
  .leaflet-control-attribution{font-size:12px}
  .legend{position:absolute;left:12px;bottom:12px;background:rgba(0,0,0,.5);padding:8px 10px;border-radius:10px;font-size:14px}
  .popup{min-width:220px}
  .popup .t{font-size:28px;font-weight:700}
  .popup .d{opacity:.8}
</style>
<body>
<div id="map"></div>
<div class="legend">データ: <a href="https://open-meteo.com/" target="_blank" rel="noopener">Open-Meteo</a> /
  レーダー: <a href="https://www.rainviewer.com/api.html" target="_blank" rel="noopener">RainViewer</a><br>
  地図: <a href="https://maps.gsi.go.jp/development/ichiran.html" target="_blank" rel="noopener">地理院タイル</a>（出典：国土地理院）
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
// ---- 設定（地点は自由に追加/編集OK） ----
const PLACES = [
  { name:"千代田区", lat:35.6812, lon:139.7671, zoom:7 },
  { name:"成田",     lat:35.7767, lon:140.3186 },
  { name:"仙台",     lat:38.2688, lon:140.8721 }
];
const REFRESH_MIN = 5;          // 自動更新間隔（分）
const RAIN_ANIM = true;         // レーダーを過去アニメ再生するか

// ---- 地図初期化（地理院タイル） ----
const map = L.map('map', { zoomControl:false, attributionControl:true });
map.setView([PLACES[0].lat, PLACES[0].lon], PLACES[0].zoom || 6);

// 地理院・標準地図
L.tileLayer('https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png', {
  maxZoom:18,
  attribution:'&copy; <a href="https://www.gsi.go.jp/kikakuchousei/kikakuchousei40182.html" target="_blank">国土地理院</a>'
}).addTo(map);

// ---- 降雨レーダー（RainViewer） ----
let rvFrames = [], rvIdx = 0, rvLayer;
async function loadRainViewer(){
  // フレーム一覧
  const meta = await (await fetch('https://api.rainviewer.com/public/weather-maps.json')).json();
  rvFrames = (RAIN_ANIM ? meta.radar.past : meta.radar.nowcast ? [meta.radar.nowcast[0]] : meta.radar.past.slice(-1));
  playRV();
}
function playRV(){
  if(!rvFrames.length) return;
  const ts = rvFrames[rvIdx].time;
  const url = `https://tilecache.rainviewer.com/v2/radar/${ts}/256/{z}/{x}/{y}/2/1_1.png`;
  if(rvLayer) map.removeLayer(rvLayer);
  rvLayer = L.tileLayer(url, { opacity:0.6, zIndex: 500, attribution:'Radar &copy; RainViewer' }).addTo(map);
  rvIdx = (rvIdx+1) % rvFrames.length;
}
setInterval(playRV, 700); // アニメ速度

// ---- Open-Meteo：地点ピンに現在値と今日の予報 ----
const wmoDesc = new Map([[0,"快晴"],[1,"晴れ"],[2,"晴れ時々曇り"],[3,"曇り"],[51,"霧雨(弱)"],[53,"霧雨"],[55,"霧雨(強)"],
  [61,"雨(弱)"],[63,"雨"],[65,"雨(強)"],[71,"雪(弱)"],[73,"雪"],[75,"大雪"],[80,"にわか雨"],[81,"にわか強雨"],[82,"激しいにわか雨"],[95,"雷雨"],[96,"雷雹"],[99,"激しい雷雹"]]);

async function fetchPoint(lat,lon){
  const u = new URL('https://api.open-meteo.com/v1/forecast');
  Object.assign(u.searchParams, {
    latitude:lat, longitude:lon, timezone:'Asia/Tokyo',
    current:'temperature_2m,weather_code',
    daily:'temperature_2m_max,temperature_2m_min',
    forecast_days:1, models:'jma_seamless'
  });
  const j = await (await fetch(u)).json();
  const cur = j.current;
  const max = Math.round(j.daily.temperature_2m_max[0]);
  const min = Math.round(j.daily.temperature_2m_min[0]);
  return { t: Math.round(cur.temperature_2m), code: cur.weather_code, max, min };
}

async function addMarkers(){
  for(const p of PLACES){
    const w = await fetchPoint(p.lat,p.lon);
    const marker = L.marker([p.lat,p.lon]).addTo(map);
    const desc = wmoDesc.get(w.code) || '—';
    marker.bindPopup(`<div class="popup"><div class="t">${p.name}　${w.t}°C</div>
      <div class="d">${desc}　↑${w.max}° / ↓${w.min}°</div></div>`);
  }
}

// ---- 自動更新 ----
async function init(){
  await addMarkers();
  await loadRainViewer();
}
init();
setInterval(()=>location.reload(), REFRESH_MIN*60*1000);
</script>
</body></html>
